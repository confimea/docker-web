version: '3.8'

services:

  traefik:
    image: traefik:${TRAEFIK_VERSION}
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - traefik_certificates:/certificates
    command:
      - --providers.docker
      - --providers.docker.constraints=Label(`traefik.constraint-label`, `traefik`)
      - --providers.docker.exposedbydefault=false
      - --providers.swarm
      - --providers.swarm.endpoint=unix:///var/run/docker.sock
      - --entrypoints.http.address=:80
      - --entrypoints.https.address=:443
      - --certificatesresolvers.le.acme.email=${TRAEFIK_CERTIFICATE_EMAIL}
      - --certificatesresolvers.le.acme.storage=/certificates/acme.json
      - --certificatesresolvers.le.acme.tlschallenge=true
      - --accesslog
      - --log
      - --api
    networks:
      - traefik
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints: [node.role == manager]

  traefik_dashboard:
    image: traefik:${TRAEFIK_VERSION}
    deploy:
      labels:
        - traefik.constraint-label=traefik
        - traefik.docker.network=traefik
        - traefik.enable=true
        - traefik.http.services.traefik.loadbalancer.server.port=8080

        - traefik.http.middlewares.https-redirect.redirectscheme.scheme=https
        - traefik.http.middlewares.https-redirect.redirectscheme.permanent=true
        - traefik.http.middlewares.web-traefik_dashboard-auth.basicauth.users=root:${TRAEFIK_DASHBOARD_HASHED_PASSWORD}

        # Router: HTTP
        - traefik.http.routers.traefik-http.rule=Host(`${TRAEFIK_DASHBOARD_HOST}`)
        - traefik.http.routers.traefik-http.entrypoints=http
        - traefik.http.routers.traefik-http.middlewares=https-redirect

        # Router: HTTPS
        - traefik.http.routers.traefik-https.rule=Host(`${TRAEFIK_DASHBOARD_HOST}`)
        - traefik.http.routers.traefik-https.entrypoints=https
        - traefik.http.routers.traefik-https.tls=true
        - traefik.http.routers.traefik-https.tls.certresolver=le
        - traefik.http.routers.traefik-https.service=api@internal
        - traefik.http.routers.traefik-https.middlewares=web-traefik_dashboard-auth

    networks:
      - traefik

  portainer:
    image: portainer/portainer-ee:${PORTAINER_VERSION}
    command: -H tcp://tasks.portainer_agent:9001 --tlsskipverify
    volumes:
      - portainer_data:/data
    networks:
      - portainer
      - traefik
    deploy:
      labels:
        - traefik.constraint-label=traefik
        - traefik.docker.network=traefik
        - traefik.enable=true
        - traefik.http.services.portainer.loadbalancer.server.port=9000

        - traefik.http.middlewares.https-redirect.redirectscheme.scheme=https
        - traefik.http.middlewares.https-redirect.redirectscheme.permanent=true

        # Router: HTTP
        - traefik.http.routers.portainer-http.rule=Host(`${PORTAINER_HOST}`)
        - traefik.http.routers.portainer-http.entrypoints=http
        - traefik.http.routers.portainer-http.middlewares=https-redirect

        # Router: HTTPS
        - traefik.http.routers.portainer-https.rule=Host(`${PORTAINER_HOST}`)
        - traefik.http.routers.portainer-https.entrypoints=https
        - traefik.http.routers.portainer-https.tls=true
        - traefik.http.routers.portainer-https.tls.certresolver=le
      mode: replicated
      replicas: 1
      placement:
        constraints: [node.role == manager]

  portainer_agent:
    image: portainer/agent:${PORTAINER_AGENT_VERSION}
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /var/lib/docker/volumes:/var/lib/docker/volumes
    networks:
      - portainer
    deploy:
      mode: global
      placement:
        constraints: [node.platform.os == linux]

  system_cleaner:
    image: docker:latest
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    entrypoint: [ "sh", "-c" ]
    command: >
      "while true; do
        if [ $$(date +%H) = '00' ]; then
          docker system prune -af;
        fi;
        sleep 3600;
      done"
    deploy:
      mode: global  # Deploy one cleaner per node
      restart_policy:
        condition: any

networks:
  portainer:
    attachable: true
  traefik:
    external: true

volumes:
  portainer_data:
  traefik_certificates:
